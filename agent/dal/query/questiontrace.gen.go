// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"agent/dal/model"
)

func newQuestiontrace(db *gorm.DB, opts ...gen.DOOption) questiontrace {
	_questiontrace := questiontrace{}

	_questiontrace.questiontraceDo.UseDB(db, opts...)
	_questiontrace.questiontraceDo.UseModel(&model.Questiontrace{})

	tableName := _questiontrace.questiontraceDo.TableName()
	_questiontrace.ALL = field.NewAsterisk(tableName)
	_questiontrace.CreatedAt = field.NewTime(tableName, "created_at")
	_questiontrace.UpdatedAt = field.NewTime(tableName, "updated_at")
	_questiontrace.IsDeleted = field.NewBool(tableName, "is_deleted")
	_questiontrace.DeletedAt = field.NewField(tableName, "deleted_at")
	_questiontrace.ID = field.NewInt32(tableName, "id")
	_questiontrace.UserID = field.NewInt32(tableName, "user_id")
	_questiontrace.QuestionID = field.NewInt32(tableName, "question_id")
	_questiontrace.Source = field.NewString(tableName, "source")
	_questiontrace.Model = field.NewString(tableName, "model")
	_questiontrace.SourceID = field.NewString(tableName, "source_id")

	_questiontrace.fillFieldMap()

	return _questiontrace
}

type questiontrace struct {
	questiontraceDo questiontraceDo

	ALL        field.Asterisk
	CreatedAt  field.Time
	UpdatedAt  field.Time
	IsDeleted  field.Bool
	DeletedAt  field.Field
	ID         field.Int32
	UserID     field.Int32
	QuestionID field.Int32
	Source     field.String
	Model      field.String
	SourceID   field.String

	fieldMap map[string]field.Expr
}

func (q questiontrace) Table(newTableName string) *questiontrace {
	q.questiontraceDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q questiontrace) As(alias string) *questiontrace {
	q.questiontraceDo.DO = *(q.questiontraceDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *questiontrace) updateTableName(table string) *questiontrace {
	q.ALL = field.NewAsterisk(table)
	q.CreatedAt = field.NewTime(table, "created_at")
	q.UpdatedAt = field.NewTime(table, "updated_at")
	q.IsDeleted = field.NewBool(table, "is_deleted")
	q.DeletedAt = field.NewField(table, "deleted_at")
	q.ID = field.NewInt32(table, "id")
	q.UserID = field.NewInt32(table, "user_id")
	q.QuestionID = field.NewInt32(table, "question_id")
	q.Source = field.NewString(table, "source")
	q.Model = field.NewString(table, "model")
	q.SourceID = field.NewString(table, "source_id")

	q.fillFieldMap()

	return q
}

func (q *questiontrace) WithContext(ctx context.Context) *questiontraceDo {
	return q.questiontraceDo.WithContext(ctx)
}

func (q questiontrace) TableName() string { return q.questiontraceDo.TableName() }

func (q questiontrace) Alias() string { return q.questiontraceDo.Alias() }

func (q questiontrace) Columns(cols ...field.Expr) gen.Columns {
	return q.questiontraceDo.Columns(cols...)
}

func (q *questiontrace) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *questiontrace) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 10)
	q.fieldMap["created_at"] = q.CreatedAt
	q.fieldMap["updated_at"] = q.UpdatedAt
	q.fieldMap["is_deleted"] = q.IsDeleted
	q.fieldMap["deleted_at"] = q.DeletedAt
	q.fieldMap["id"] = q.ID
	q.fieldMap["user_id"] = q.UserID
	q.fieldMap["question_id"] = q.QuestionID
	q.fieldMap["source"] = q.Source
	q.fieldMap["model"] = q.Model
	q.fieldMap["source_id"] = q.SourceID
}

func (q questiontrace) clone(db *gorm.DB) questiontrace {
	q.questiontraceDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q questiontrace) replaceDB(db *gorm.DB) questiontrace {
	q.questiontraceDo.ReplaceDB(db)
	return q
}

type questiontraceDo struct{ gen.DO }

func (q questiontraceDo) Debug() *questiontraceDo {
	return q.withDO(q.DO.Debug())
}

func (q questiontraceDo) WithContext(ctx context.Context) *questiontraceDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q questiontraceDo) ReadDB() *questiontraceDo {
	return q.Clauses(dbresolver.Read)
}

func (q questiontraceDo) WriteDB() *questiontraceDo {
	return q.Clauses(dbresolver.Write)
}

func (q questiontraceDo) Session(config *gorm.Session) *questiontraceDo {
	return q.withDO(q.DO.Session(config))
}

func (q questiontraceDo) Clauses(conds ...clause.Expression) *questiontraceDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q questiontraceDo) Returning(value interface{}, columns ...string) *questiontraceDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q questiontraceDo) Not(conds ...gen.Condition) *questiontraceDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q questiontraceDo) Or(conds ...gen.Condition) *questiontraceDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q questiontraceDo) Select(conds ...field.Expr) *questiontraceDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q questiontraceDo) Where(conds ...gen.Condition) *questiontraceDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q questiontraceDo) Order(conds ...field.Expr) *questiontraceDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q questiontraceDo) Distinct(cols ...field.Expr) *questiontraceDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q questiontraceDo) Omit(cols ...field.Expr) *questiontraceDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q questiontraceDo) Join(table schema.Tabler, on ...field.Expr) *questiontraceDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q questiontraceDo) LeftJoin(table schema.Tabler, on ...field.Expr) *questiontraceDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q questiontraceDo) RightJoin(table schema.Tabler, on ...field.Expr) *questiontraceDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q questiontraceDo) Group(cols ...field.Expr) *questiontraceDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q questiontraceDo) Having(conds ...gen.Condition) *questiontraceDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q questiontraceDo) Limit(limit int) *questiontraceDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q questiontraceDo) Offset(offset int) *questiontraceDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q questiontraceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *questiontraceDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q questiontraceDo) Unscoped() *questiontraceDo {
	return q.withDO(q.DO.Unscoped())
}

func (q questiontraceDo) Create(values ...*model.Questiontrace) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q questiontraceDo) CreateInBatches(values []*model.Questiontrace, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q questiontraceDo) Save(values ...*model.Questiontrace) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q questiontraceDo) First() (*model.Questiontrace, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Questiontrace), nil
	}
}

func (q questiontraceDo) Take() (*model.Questiontrace, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Questiontrace), nil
	}
}

func (q questiontraceDo) Last() (*model.Questiontrace, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Questiontrace), nil
	}
}

func (q questiontraceDo) Find() ([]*model.Questiontrace, error) {
	result, err := q.DO.Find()
	return result.([]*model.Questiontrace), err
}

func (q questiontraceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Questiontrace, err error) {
	buf := make([]*model.Questiontrace, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q questiontraceDo) FindInBatches(result *[]*model.Questiontrace, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q questiontraceDo) Attrs(attrs ...field.AssignExpr) *questiontraceDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q questiontraceDo) Assign(attrs ...field.AssignExpr) *questiontraceDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q questiontraceDo) Joins(fields ...field.RelationField) *questiontraceDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q questiontraceDo) Preload(fields ...field.RelationField) *questiontraceDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q questiontraceDo) FirstOrInit() (*model.Questiontrace, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Questiontrace), nil
	}
}

func (q questiontraceDo) FirstOrCreate() (*model.Questiontrace, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Questiontrace), nil
	}
}

func (q questiontraceDo) FindByPage(offset int, limit int) (result []*model.Questiontrace, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q questiontraceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q questiontraceDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q questiontraceDo) Delete(models ...*model.Questiontrace) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *questiontraceDo) withDO(do gen.Dao) *questiontraceDo {
	q.DO = *do.(*gen.DO)
	return q
}
